/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.voight.morse.morsepractice.ui;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.swing.SwingWorker;
import org.voight.morse.morsepractice.MorsePlayer;

/**
 *
 * @author Jeffrey Voight <jeff.voight@gmail.com>
 */
public class MainJFrame extends javax.swing.JFrame {

    private boolean immediatePlay = false;
    private MorsePlayer morsePlayer;
    private int frequency = 44100, hz = 700, gpm = 10;
    //practice listen testing
    private Mode mode = Mode.PRACTICE;
    private boolean playing = false;

    /**
     *
     */
    public enum Mode {

        /**
         *
         */
        PRACTICE,
        /**
         *
         */
        LISTEN,
        /**
         *
         */
        TESTING;
    }

    /**
     * Creates new form MainJFrame
     *
     * @throws java.io.IOException
     * @throws javax.sound.sampled.LineUnavailableException
     */
    public MainJFrame() throws IOException, LineUnavailableException {
        initComponents();
        enablePracticeMode();
        morsePlayer = new MorsePlayer(frequency, hz, gpm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        playButton = new javax.swing.JButton();
        codePanel = new javax.swing.JPanel();
        canvas1 = new java.awt.Canvas();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentLetterText = new javax.swing.JTextArea();
        groupCountPanel = new javax.swing.JPanel();
        groupCountLabel = new javax.swing.JLabel();
        groupCountSlider = new javax.swing.JSlider();
        groupLabel = new javax.swing.JLabel();
        modePanel = new javax.swing.JPanel();
        practiceRadioButton = new javax.swing.JRadioButton();
        listenRadioButton = new javax.swing.JRadioButton();
        testingRadioButton = new javax.swing.JRadioButton();
        textInputPanel = new javax.swing.JPanel();
        textInputLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        immediatePlayCheckbox = new javax.swing.JCheckBox();
        toneFrequencyPanel = new javax.swing.JPanel();
        toneFrequencyLabel = new javax.swing.JLabel();
        toneFrequencySlider = new javax.swing.JSlider();
        toneFrequencyNumberLabel = new javax.swing.JLabel();
        codeSpeedPanel = new javax.swing.JPanel();
        codeSpeedLabel = new javax.swing.JLabel();
        codeSpeedNumberLabel = new javax.swing.JLabel();
        gpmSlider = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Morse Practice Pad");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        getContentPane().setLayout(layout);

        playButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        playButton.setLabel("Play");
        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playButtonMouseClicked(evt);
            }
        });
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        getContentPane().add(playButton, gridBagConstraints);

        codePanel.setPreferredSize(new java.awt.Dimension(200, 80));

        canvas1.setBackground(new java.awt.Color(255, 255, 204));
        canvas1.setPreferredSize(new java.awt.Dimension(200, 80));

        javax.swing.GroupLayout codePanelLayout = new javax.swing.GroupLayout(codePanel);
        codePanel.setLayout(codePanelLayout);
        codePanelLayout.setHorizontalGroup(
            codePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        codePanelLayout.setVerticalGroup(
            codePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(codePanel, gridBagConstraints);

        currentLetterText.setColumns(1);
        currentLetterText.setFont(new java.awt.Font("Arial", 0, 160)); // NOI18N
        currentLetterText.setRows(1);
        currentLetterText.setFocusable(false);
        jScrollPane2.setViewportView(currentLetterText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane2, gridBagConstraints);

        groupCountPanel.setMinimumSize(new java.awt.Dimension(352, 112));
        groupCountPanel.setLayout(new java.awt.GridBagLayout());

        groupCountLabel.setText("10 Groups");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        groupCountPanel.add(groupCountLabel, gridBagConstraints);

        groupCountSlider.setMajorTickSpacing(5);
        groupCountSlider.setMaximum(20);
        groupCountSlider.setMinimum(1);
        groupCountSlider.setMinorTickSpacing(1);
        groupCountSlider.setPaintLabels(true);
        groupCountSlider.setPaintTicks(true);
        groupCountSlider.setToolTipText("");
        groupCountSlider.setValue(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        groupCountPanel.add(groupCountSlider, gridBagConstraints);

        groupLabel.setText("Groups");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        groupCountPanel.add(groupLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 16, 0, 0);
        getContentPane().add(groupCountPanel, gridBagConstraints);

        buttonGroup1.add(practiceRadioButton);
        practiceRadioButton.setSelected(true);
        practiceRadioButton.setText("Practice Mode");
        practiceRadioButton.setToolTipText("You type code to be played back");
        practiceRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                practiceRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(listenRadioButton);
        listenRadioButton.setText("Listen Mode");
        listenRadioButton.setToolTipText("Plays random code and displays it");
        listenRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(testingRadioButton);
        testingRadioButton.setText("Testing Mode");
        testingRadioButton.setToolTipText("Plays code while you enter your guesses");
        testingRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modePanelLayout = new javax.swing.GroupLayout(modePanel);
        modePanel.setLayout(modePanelLayout);
        modePanelLayout.setHorizontalGroup(
            modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listenRadioButton)
                    .addComponent(testingRadioButton)
                    .addComponent(practiceRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modePanelLayout.setVerticalGroup(
            modePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(practiceRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listenRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testingRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        getContentPane().add(modePanel, gridBagConstraints);

        textInputLabel.setText("Text Input");
        textInputLabel.setToolTipText("");

        jScrollPane1.setToolTipText("Enter text here and click Play");
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setName("inputText"); // NOI18N

        inputTextArea.setColumns(15);
        inputTextArea.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 18)); // NOI18N
        inputTextArea.setRows(5);
        inputTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputTextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(inputTextArea);

        immediatePlayCheckbox.setText("Immediate Play");
        immediatePlayCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                immediatePlayCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout textInputPanelLayout = new javax.swing.GroupLayout(textInputPanel);
        textInputPanel.setLayout(textInputPanelLayout);
        textInputPanelLayout.setHorizontalGroup(
            textInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textInputPanelLayout.createSequentialGroup()
                .addGroup(textInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(textInputPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textInputLabel)
                        .addGap(64, 64, 64)
                        .addComponent(immediatePlayCheckbox))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 85, Short.MAX_VALUE))
        );
        textInputPanelLayout.setVerticalGroup(
            textInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textInputLabel)
                    .addComponent(immediatePlayCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.ipadx = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 0);
        getContentPane().add(textInputPanel, gridBagConstraints);

        toneFrequencyPanel.setLayout(new java.awt.GridBagLayout());

        toneFrequencyLabel.setText("Tone Frequency");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        toneFrequencyPanel.add(toneFrequencyLabel, gridBagConstraints);

        toneFrequencySlider.setMajorTickSpacing(100);
        toneFrequencySlider.setMaximum(1000);
        toneFrequencySlider.setMinimum(300);
        toneFrequencySlider.setMinorTickSpacing(50);
        toneFrequencySlider.setPaintLabels(true);
        toneFrequencySlider.setPaintTicks(true);
        toneFrequencySlider.setToolTipText("");
        toneFrequencySlider.setValue(700);
        toneFrequencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                toneFrequencySliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        toneFrequencyPanel.add(toneFrequencySlider, gridBagConstraints);

        toneFrequencyNumberLabel.setText("700 Hz");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        toneFrequencyPanel.add(toneFrequencyNumberLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 0, 0);
        getContentPane().add(toneFrequencyPanel, gridBagConstraints);

        codeSpeedPanel.setMinimumSize(new java.awt.Dimension(352, 112));
        codeSpeedPanel.setLayout(new java.awt.GridBagLayout());

        codeSpeedLabel.setText("Code Speed");
        codeSpeedLabel.setMinimumSize(new java.awt.Dimension(78, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        codeSpeedPanel.add(codeSpeedLabel, gridBagConstraints);

        codeSpeedNumberLabel.setText("10 gpm");
        codeSpeedNumberLabel.setName("gpmText"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        codeSpeedPanel.add(codeSpeedNumberLabel, gridBagConstraints);

        gpmSlider.setMajorTickSpacing(3);
        gpmSlider.setMaximum(30);
        gpmSlider.setMinimum(3);
        gpmSlider.setMinorTickSpacing(1);
        gpmSlider.setPaintLabels(true);
        gpmSlider.setPaintTicks(true);
        gpmSlider.setSnapToTicks(true);
        gpmSlider.setToolTipText("Set to the GPM you wish to hear");
        gpmSlider.setValue(10);
        gpmSlider.setName("gpmSlider"); // NOI18N
        gpmSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gpmSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        codeSpeedPanel.add(gpmSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 16, 0, 0);
        getContentPane().add(codeSpeedPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playButtonMouseClicked
        // TODO add your handling code here:
        if (playing) {
            playing = false;
            playButton.setText("Play");
        } else {
            playing = true;
            playButton.setText("STOP");
            String theText = inputTextArea.getText();
            System.out.println("Text: " + theText);
            class Player extends SwingWorker<String, String> {

                @Override
                public String doInBackground() {
                    int strLen = theText.length();
                    for (int i = 0; i < strLen && playing; i++) {
                        play(theText.charAt(i));
                    }
                    return "";
                }

                @Override
                protected void done() {
                    playing = false;
                    playButton.setText("Play");

                }
            }
            (new Player()).execute();
//            int strLen = theText.length();
//            for (int i = 0; i < strLen; i++) {
//                play(theText.charAt(i));
//            }

        }

    }//GEN-LAST:event_playButtonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.setVisible(false);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void immediatePlayCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_immediatePlayCheckboxActionPerformed
        if (immediatePlayCheckbox.isSelected()) {
            immediatePlay = true;
        } else {
            immediatePlay = false;
        }

    }//GEN-LAST:event_immediatePlayCheckboxActionPerformed

    private void play(char c) {
        try {
            currentLetterText.setText("" + Character.toUpperCase(c));
//            currentLetterText.repaint(20);
//            currentLetterText.revalidate();
            super.paintComponents(this.getGraphics());
            morsePlayer.play(c);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void inputTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextAreaKeyTyped
        if (immediatePlay) {
            Character c = evt.getKeyChar();
            play(c);
            System.out.println(c);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_inputTextAreaKeyTyped

    private void gpmSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gpmSliderStateChanged
        gpm = gpmSlider.getValue();
        codeSpeedNumberLabel.setText(gpm + " GPM");
        try {
            morsePlayer = new MorsePlayer(frequency, hz, gpm);
            // TODO add your handling code here:
        } catch (IOException | LineUnavailableException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_gpmSliderStateChanged

    private void practiceRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_practiceRadioButtonActionPerformed
        setMode(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_practiceRadioButtonActionPerformed

    private void testingRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingRadioButtonActionPerformed
        setMode(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_testingRadioButtonActionPerformed

    private void listenRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listenRadioButtonActionPerformed
        setMode(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_listenRadioButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playButtonActionPerformed

    private void toneFrequencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_toneFrequencySliderStateChanged
        int toneHz = toneFrequencySlider.getValue();
        hz = toneHz;
        try {
            morsePlayer = new MorsePlayer(frequency, hz, gpm);
        } catch (IOException | LineUnavailableException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        toneFrequencyNumberLabel.setText(hz + " Hz");
        // TODO add your handling code here:
    }//GEN-LAST:event_toneFrequencySliderStateChanged

    private void setMode(java.awt.event.ActionEvent evt) {
        if (practiceRadioButton.isSelected()) {
            mode = Mode.PRACTICE;
            enablePracticeMode();
        } else if (listenRadioButton.isSelected()) {
            mode = Mode.LISTEN;
            enableListenMode();
        } else if (testingRadioButton.isSelected()) {
            mode = Mode.TESTING;
            enableTestingMode();
        }
    }

    private void enablePracticeMode() {
        System.out.println("Practice Mode.");
        this.immediatePlayCheckbox.setEnabled(true);
        this.immediatePlayCheckbox.setSelected(false);
        this.currentLetterText.setVisible(true);
        this.inputTextArea.requestFocus();
        this.groupCountPanel.setVisible(false);

    }

    private void enableListenMode() {
        System.out.println("Listen Mode.");
        this.immediatePlayCheckbox.setEnabled(false);
        this.immediatePlayCheckbox.setSelected(false);
        this.currentLetterText.setVisible(true);
        this.groupCountPanel.setVisible(true);

    }

    private void enableTestingMode() {
        System.out.println("Testing Mode.");
        this.immediatePlayCheckbox.setEnabled(false);
        this.immediatePlayCheckbox.setSelected(false);
        this.currentLetterText.setVisible(false);
        this.groupCountPanel.setVisible(true);
        this.inputTextArea.requestFocus();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MainJFrame().setVisible(true);
            } catch (IOException | LineUnavailableException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private java.awt.Canvas canvas1;
    private javax.swing.JPanel codePanel;
    private javax.swing.JLabel codeSpeedLabel;
    private javax.swing.JLabel codeSpeedNumberLabel;
    private javax.swing.JPanel codeSpeedPanel;
    private javax.swing.JTextArea currentLetterText;
    private javax.swing.JSlider gpmSlider;
    private javax.swing.JLabel groupCountLabel;
    private javax.swing.JPanel groupCountPanel;
    private javax.swing.JSlider groupCountSlider;
    private javax.swing.JLabel groupLabel;
    private javax.swing.JCheckBox immediatePlayCheckbox;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton listenRadioButton;
    private javax.swing.JPanel modePanel;
    private javax.swing.JButton playButton;
    private javax.swing.JRadioButton practiceRadioButton;
    private javax.swing.JRadioButton testingRadioButton;
    private javax.swing.JLabel textInputLabel;
    private javax.swing.JPanel textInputPanel;
    private javax.swing.JLabel toneFrequencyLabel;
    private javax.swing.JLabel toneFrequencyNumberLabel;
    private javax.swing.JPanel toneFrequencyPanel;
    private javax.swing.JSlider toneFrequencySlider;
    // End of variables declaration//GEN-END:variables
}
