/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.voight.morse.morsepractice.ui;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.swing.SwingWorker;
import org.voight.morse.morsepractice.MorsePlayer;

/**
 *
 * @author Jeffrey Voight <jeff.voight@gmail.com>
 */
public class MainJFrame extends javax.swing.JFrame {

    private boolean immediatePlay = false;
    private MorsePlayer morsePlayer;
    private int frequency = 44100, hz = 700, gpm = 10;
    //practice listen testing
    private Mode mode = Mode.PRACTICE;
    private boolean playing = false;

    /**
     *
     */
    public enum Mode {

        /**
         *
         */
        PRACTICE,
        /**
         *
         */
        LISTEN,
        /**
         *
         */
        TESTING;
    }

    /**
     * Creates new form MainJFrame
     *
     * @throws java.io.IOException
     * @throws javax.sound.sampled.LineUnavailableException
     */
    public MainJFrame() throws IOException, LineUnavailableException {
        initComponents();
        morsePlayer = new MorsePlayer(frequency, hz, gpm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        playButton = new javax.swing.JButton();
        immediatePlayCheckbox = new javax.swing.JCheckBox();
        gpmSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        gpmSendLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        toneFrequencySlider = new javax.swing.JSlider();
        hzValueLabel = new javax.swing.JLabel();
        practiceRadioButton = new javax.swing.JRadioButton();
        listenRadioButton = new javax.swing.JRadioButton();
        testingRadioButton = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentLetterText = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Text Input");
        jLabel1.setToolTipText("");

        jScrollPane1.setToolTipText("Enter text here and click Play");
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setName("inputText"); // NOI18N

        inputTextArea.setColumns(15);
        inputTextArea.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 18)); // NOI18N
        inputTextArea.setRows(5);
        inputTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputTextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(inputTextArea);

        playButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        playButton.setLabel("Play");
        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playButtonMouseClicked(evt);
            }
        });

        immediatePlayCheckbox.setText("Immediate Play");
        immediatePlayCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                immediatePlayCheckboxActionPerformed(evt);
            }
        });

        gpmSlider.setMajorTickSpacing(3);
        gpmSlider.setMaximum(30);
        gpmSlider.setMinimum(3);
        gpmSlider.setMinorTickSpacing(1);
        gpmSlider.setPaintLabels(true);
        gpmSlider.setPaintTicks(true);
        gpmSlider.setSnapToTicks(true);
        gpmSlider.setToolTipText("Set to the GPM you wish to hear");
        gpmSlider.setValue(10);
        gpmSlider.setName("gpmSlider"); // NOI18N
        gpmSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gpmSliderStateChanged(evt);
            }
        });

        jLabel2.setText("Code Speed");

        gpmSendLabel.setText("10 gpm");
        gpmSendLabel.setName("gpmText"); // NOI18N

        jLabel3.setText("Tone Frequency");

        toneFrequencySlider.setMajorTickSpacing(100);
        toneFrequencySlider.setMaximum(1000);
        toneFrequencySlider.setMinimum(300);
        toneFrequencySlider.setMinorTickSpacing(50);
        toneFrequencySlider.setPaintLabels(true);
        toneFrequencySlider.setPaintTicks(true);
        toneFrequencySlider.setToolTipText("");
        toneFrequencySlider.setValue(700);
        toneFrequencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                toneFrequencySliderStateChanged(evt);
            }
        });

        hzValueLabel.setText("700 Hz");

        buttonGroup1.add(practiceRadioButton);
        practiceRadioButton.setSelected(true);
        practiceRadioButton.setText("Practice Mode");
        practiceRadioButton.setToolTipText("You type code to be played back");
        practiceRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                practiceRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(listenRadioButton);
        listenRadioButton.setText("Listen Mode");
        listenRadioButton.setToolTipText("Plays random code and displays it");
        listenRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(testingRadioButton);
        testingRadioButton.setText("Testing Mode");
        testingRadioButton.setToolTipText("Plays code while you enter your guesses");
        testingRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingRadioButtonActionPerformed(evt);
            }
        });

        currentLetterText.setColumns(1);
        currentLetterText.setFont(new java.awt.Font("Arial", 0, 160)); // NOI18N
        currentLetterText.setRows(1);
        currentLetterText.setFocusable(false);
        jScrollPane2.setViewportView(currentLetterText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(practiceRadioButton)
                    .addComponent(testingRadioButton)
                    .addComponent(listenRadioButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(immediatePlayCheckbox))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(gpmSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(gpmSendLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(hzValueLabel))
                                    .addComponent(toneFrequencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(practiceRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(listenRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testingRadioButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(gpmSendLabel)
                                    .addComponent(immediatePlayCheckbox)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(gpmSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(hzValueLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toneFrequencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(playButton)
                .addGap(100, 100, 100))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playButtonMouseClicked
        // TODO add your handling code here:
        if (playing) {
            playing = false;
            playButton.setText("Play");
        } else {
            playing = true;
            playButton.setText("STOP");
            String theText = inputTextArea.getText();
            System.out.println("Text: " + theText);
            class Player extends SwingWorker<String, String> {

                @Override
                public String doInBackground() {
                    int strLen = theText.length();
                    for (int i = 0; i < strLen && playing; i++) {
                        play(theText.charAt(i));
                    }
                    return "";
                }

                @Override
                protected void done() {
                    playing = false;
                    playButton.setText("Play");

                }
            }
            (new Player()).execute();
//            int strLen = theText.length();
//            for (int i = 0; i < strLen; i++) {
//                play(theText.charAt(i));
//            }

        }

    }//GEN-LAST:event_playButtonMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.setVisible(false);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void immediatePlayCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_immediatePlayCheckboxActionPerformed
        if (immediatePlayCheckbox.isSelected()) {
            immediatePlay = true;
        } else {
            immediatePlay = false;
        }

    }//GEN-LAST:event_immediatePlayCheckboxActionPerformed

    private void play(char c) {
        try {
            currentLetterText.setText("" + Character.toUpperCase(c));
//            currentLetterText.repaint(20);
//            currentLetterText.revalidate();
            super.paintComponents(this.getGraphics());
            morsePlayer.play(c);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void inputTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextAreaKeyTyped
        if (immediatePlay) {
            Character c = evt.getKeyChar();
            play(c);
            System.out.println(c);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_inputTextAreaKeyTyped

    private void gpmSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gpmSliderStateChanged
        gpm = gpmSlider.getValue();
        gpmSendLabel.setText(gpm + " GPM");
        try {
            morsePlayer = new MorsePlayer(frequency, hz, gpm);
            // TODO add your handling code here:
        } catch (IOException | LineUnavailableException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_gpmSliderStateChanged

    private void toneFrequencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_toneFrequencySliderStateChanged
        int toneHz = toneFrequencySlider.getValue();
        hz = toneHz;
        try {
            morsePlayer = new MorsePlayer(frequency, hz, gpm);
        } catch (IOException | LineUnavailableException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        hzValueLabel.setText(hz + " Hz");
        // TODO add your handling code here:
    }//GEN-LAST:event_toneFrequencySliderStateChanged

    private void practiceRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_practiceRadioButtonActionPerformed
        setMode(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_practiceRadioButtonActionPerformed

    private void testingRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingRadioButtonActionPerformed
        setMode(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_testingRadioButtonActionPerformed

    private void listenRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listenRadioButtonActionPerformed
        setMode(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_listenRadioButtonActionPerformed

    private void setMode(java.awt.event.ActionEvent evt) {
        if (practiceRadioButton.isSelected()) {
            mode = Mode.PRACTICE;
            enablePracticeMode();
        } else if (listenRadioButton.isSelected()) {
            mode = Mode.LISTEN;
            enableListenMode();
        } else if (testingRadioButton.isSelected()) {
            mode = Mode.TESTING;
            enableTestingMode();
        }
    }

    private void enablePracticeMode() {
        System.out.println("Practice Mode.");
        this.immediatePlayCheckbox.setEnabled(true);
        this.immediatePlayCheckbox.setSelected(false);
        this.currentLetterText.setVisible(true);

    }

    private void enableListenMode() {
        System.out.println("Listen Mode.");
        this.immediatePlayCheckbox.setEnabled(false);
        this.immediatePlayCheckbox.setSelected(false);
        this.currentLetterText.setVisible(true);

    }

    private void enableTestingMode() {
        System.out.println("Testing Mode.");
        this.immediatePlayCheckbox.setEnabled(false);
        this.immediatePlayCheckbox.setSelected(false);
        this.currentLetterText.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new MainJFrame().setVisible(true);
            } catch (IOException | LineUnavailableException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea currentLetterText;
    private javax.swing.JLabel gpmSendLabel;
    private javax.swing.JSlider gpmSlider;
    private javax.swing.JLabel hzValueLabel;
    private javax.swing.JCheckBox immediatePlayCheckbox;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton listenRadioButton;
    private javax.swing.JButton playButton;
    private javax.swing.JRadioButton practiceRadioButton;
    private javax.swing.JRadioButton testingRadioButton;
    private javax.swing.JSlider toneFrequencySlider;
    // End of variables declaration//GEN-END:variables
}
